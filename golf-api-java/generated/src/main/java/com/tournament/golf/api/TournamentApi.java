/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tournament.golf.api;

import com.tournament.golf.apimodel.Tournament;
import com.tournament.golf.apimodel.TournamentCreate;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-25T14:29:10.223704700-04:00[America/New_York]")
@Validated
@Tag(name = "Tournament", description = "Tournament management operations")
public interface TournamentApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/tournament : Create new tournament (only one can exist at a time)
     *
     * @param tournamentCreate  (required)
     * @return Tournament created (status code 201)
     *         or Tournament already exists (status code 409)
     */
    @Operation(
        operationId = "createTournament",
        summary = "Create new tournament (only one can exist at a time)",
        tags = { "Tournament" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Tournament created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Tournament.class))
            }),
            @ApiResponse(responseCode = "409", description = "Tournament already exists")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/tournament",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Tournament> createTournament(
        @Parameter(name = "TournamentCreate", description = "", required = true) @Valid @RequestBody TournamentCreate tournamentCreate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"coursePars\" : [ 0, 0 ], \"totalPar\" : 72, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/tournament : Get current tournament details
     *
     * @return Tournament details (status code 200)
     *         or No tournament exists (status code 404)
     */
    @Operation(
        operationId = "getTournament",
        summary = "Get current tournament details",
        tags = { "Tournament" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Tournament details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Tournament.class))
            }),
            @ApiResponse(responseCode = "404", description = "No tournament exists")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/tournament",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Tournament> getTournament(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"coursePars\" : [ 0, 0 ], \"totalPar\" : 72, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
