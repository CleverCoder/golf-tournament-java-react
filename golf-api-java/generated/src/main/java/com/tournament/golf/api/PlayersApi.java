/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tournament.golf.api;

import com.tournament.golf.apimodel.Player;
import com.tournament.golf.apimodel.PlayerCreate;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-25T14:29:10.223704700-04:00[America/New_York]")
@Validated
@Tag(name = "Players", description = "Player management operations")
public interface PlayersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/players : Register a new player
     *
     * @param playerCreate  (required)
     * @return Player created (status code 201)
     */
    @Operation(
        operationId = "createPlayer",
        summary = "Register a new player",
        tags = { "Players" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Player created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Player.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/players",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Player> createPlayer(
        @Parameter(name = "PlayerCreate", description = "", required = true) @Valid @RequestBody PlayerCreate playerCreate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"relativeToPar\" : 6, \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"holesCompleted\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/players : List all players
     *
     * @return List of players (status code 200)
     */
    @Operation(
        operationId = "listPlayers",
        summary = "List all players",
        tags = { "Players" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of players", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Player.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/players",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Player>> listPlayers(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"relativeToPar\" : 6, \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"holesCompleted\" : 1 }, { \"relativeToPar\" : 6, \"name\" : \"name\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"holesCompleted\" : 1 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
